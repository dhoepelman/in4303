//Done
module test-MainClass

language MiniJava
start symbol MainClass

// Syntax tests

test mainclass empty [[
	class id {
		public static void main(String[] id) {
			{}
		}
	}
]] parse succeeds

// whitespace

test mainclass spaced [[
	class id {
		public static void main ( String [ ] id) {
			{}
		}
	}
]] parse succeeds

test mainclass invalid modifier [[
	class id {
		final public static void main(String[] id) {
			{}
		}
	}
]] parse fails

test mainclass invalid modifier 2 [[
	class id {
		abstract public static void main(String[] id) {
			{}
		}
	}
]] parse fails

test mainclass invalid order [[
	class id {
		public static main void(String[] id) {
			{}
		}
	}
]] parse fails

// This one is try,if you read the description carefully only a single statement can be in the mainclass!
// So to use multiple statements in the main class you *need* to use additional brackets
// MainClass    =>   class id { public static void main ( String [] id )
//						{ Statement }} 
test mainclass statement invalid multiple [[
	class id {
		public static void main(String[] id) {
			x = y; y = z;
		}
	}
]] parse fails
// But this should pass
test mainclass statement valid multiple [[
	class id {
		public static void main(String[] id) {
			{ x = y; y = z; }
		}
	}
]] parse succeeds

// Now let's just try a lot of invalid ones with subtle mistakes
test mainclass invalid noargs [[
	class id {
		public static void main() {
			{}
		}
	}
]] parse fails

test mainclass invalid nopublic [[
	class id {
		static void main(String[] id) {
			{}
		}
	}
]] parse fails

test mainclass forgotten space [[
	class id {
		public staticvoid main(String[] id) {
			{}
		}
	}
]] parse fails

test mainclass invalid nostatic [[
	class id {
		public void main(String[] id) {
			{}
		}
	}
]] parse fails

test mainclass invalid notype [[
	class id {
		public static main(String[] id) {
			{}
		}
	}
]] parse fails

test mainclass invalid switched1 [[
	class id {
		static public void main(String[] id) {
			{}
		}
	}
]] parse fails

test mainclass invalid switched2 [[
	class id {
		public void static main(String[] id) {
			{}
		}
	}
]] parse fails

test mainclass invalid mainname [[
	class id {
		public static void start(String[] id) {
			{}
		}
	}
]] parse fails

test mainclass multiple methods [[
	class id {
		public static void main(String[] id) {
			{}
		}
		
		public int id(int a) {
			return 1;
		}
	}
]] parse fails

test mainclass vardecl [[
	class id {
		public static void main(String[] id) {
			int i;
		}
	}
]] parse fails

test mainclass normal method [[
	class id {
		public static void main(String[] id) {
			return 5;
		}
	}
]] parse fails

test mainclass normal method 2 [[
	class id {
		public static void main(String[] id) {
			int i;
			i = i + 5;
			return i;
		}
	}
]] parse fails

test mainclass with variable [[
	class id {
		int a;
		public static void main(String[] id) {
			{}
		}
	}
]] parse fails

test mainclass with method [[
	class id {
		public static void main(String[] id) {
			{}
		}
		
		public int m() {
			return 1;
		}
	}
]] parse fails

test mainclass with 2 main method [[
	class id {
		public static void main(String[] id) {
			{}
		}
		
		public static void main(String[] id) {
			{}
		}
	}
]] parse fails

test mainclass with parent [[
	class id extends A {
		public static void main(String[] id) {
			{}
		}
	}
]] parse fails

// Abstract syntax trees tests

test ast main [[
	class id1 {
		public static void main(String[] id2) {
			{}
		}
	}
]] parse to Main("id1", "id2", Block([]))

// Disambiguation tests