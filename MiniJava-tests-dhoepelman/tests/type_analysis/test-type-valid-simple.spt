// This contains some valid code
module test-type-valid-simple

language MiniJava
start symbol Start

setup MiniJavaStart [[
	class Main {
    	public static void main(String[] args) {
     	 System.out.println(1);
    	}
  	}
]]

test valid println [[
	class A {
		public int A() {
			System.out.println(5);
			return 1;
		}
	}
]] 0 errors

test valid AND op [[
	class A {
		public boolean A() {
			return true && false;
		}
	}
]] 0 errors

test valid AND op variable [[
	class A {
		public boolean A() {
			boolean a;
			boolean b;
			
			return a && b;
		}
	}
]]

test valid LT op literal [[
	class A {
		public boolean A() {
			return 1 < 2;
		}
	}
]] 0 errors

test valid LT op var [[
	class A {
		public boolean foo() {
			int a;
			int b;
			return a < b;
		}
	}
]] 0 errors

test valid PLUS op [[
	class A {
		public int A() {
			return 1 + 2;
		}
	}
]] 0 errors

test valid PLUS op array [[
	class A {
		int[] a;
		public int A() {
			return a[1] + a[2];
		}
	}
]] 0 errors

test valid MINUS op [[
	class A {
		public int A() {
			return 1 - 2;
		}
	}
]] 0 errors

test valid MULT op [[
	class A {
		public int A() {
			return 1 * 2;
		}
	}
]] 0 errors

test return boolean [[
	class A {
		public boolean foo() {
			return true;
		}
	}
]] 0 errors

test return int [[
	class A {
		public int foo() {
			return 1;
		}
	}
]] 0 errors

test return int array [[
	class A {
		public int[] foo() {
			return new int[5];
		}
	}
]] 0 errors

test return class [[
	class A {
		public A foo() {
			return new A();
		}
	}
]] 0 errors

test return subclass [[
	class A{}
	class B extends A{}
	class C {
		public A foo() {
			return new B();
		}
	}
]] 0 errors

test return different subclass [[
	class A{}
	class B extends A{}
	class C extends A{}
	
	class D {
		public A foo() {
			A ret;
			if(1 < 2) {
				ret = new B();
			} else {
				ret = new C();
			}
			return ret;
		}
	}
]] 0 errors

test if [[
	class A {
		public int foo() {
			int a;
			if(true) {
				a = 1;
			} else {
				a = 0;
			}
			return a;
		}
	}
]] 0 errors

test while [[
	class A {
		public int foo() {
			int a;
			a=0;
			while(true) {
				a = a+1;
			}
			return a;
		}
	}
]] 0 errors

test assignment boolean [[
	class A{
		public int foo(){
			boolean a;
			a = true;
			return 1;
		}
	}
]] 0 errors

test assignment int [[
	class A{
		public int foo(){
			int a;
			a = 1;
			return 1;
		}
	}
]] 0 errors

test assignment int array 1[[
	class A{
		public int foo(){
			int[] a;
			a = new int[1];
			return 1;
		}
	}
]] 0 errors

test assignment int array 2[[
	class A{
		public int foo(){
			int[] a;
			a[0] = 1;
			return 1;
		}
	}
]] 0 errors

test assignment class [[
	class A{
		public int foo(){
			A a;
			a = new A();
			return 1;
		}
	}
]] 0 errors

test assignment this [[
	class A {
		public int foo() {
			A a;
			a = this;
			return 1;
		}
	}
]] 0 errors

test assignment subclass[[
	class A{
		public int foo(){
			A a;
			a = new B();
			return 1;
		}
	}
	class B extends A {}
]] 0 errors