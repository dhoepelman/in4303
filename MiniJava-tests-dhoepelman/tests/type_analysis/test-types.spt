module test-types

language MiniJava
start symbol Start

setup MiniJavaStart [[
	class Main {
    	public static void main(String[] args) {
     	 System.out.println(1);
    	}
  	}
  	
]]

test literal type integer [[
	class A {
		public int foo() {
			return [[1]];
		}
	}
]] run get-type to Int()

test literal type boolean [[
	class A {
		public boolean foo() {
			return [[true]];
		}
	}
]] run get-type to Bool()

test instantiate type int array [[
	class A {
		public int[] foo() {
			return [[new int[5] ]];
		}
	}
]] run get-type to IntArray()

test instantiate type class identical[[
	class A {
		public A foo() {
			return [[new A()]];
		}
	}
]] run get-type to ClassType(A)

test instantiate type class different [[
	class A {}
	class B {
		public A foo() {
			return new A();
		}
	}
]] run get-type to ClassType(A)

test instantiate type subclass [[
	class A{}
	class B extends A {}
	class C {
		public B foo() {
			return [[new B()]];
		}
	}
]] run get-type to ClassType(B)

test reference bool [[
	class A {
		boolean a;
		
		public boolean foo() {
			return [[a]];
		}
	}
]] run get-type to Bool()

test reference int [[
	class A {
		int a;
		
		public int foo() {
			return [[a]];
		}
	}
]] run get-type to Int()

test reference array [[
	class A {
		int[] a;
		
		public int[] foo() {
			return [[a]];
		}
	}
]] run get-type to IntArray()

test reference class identical [[
	class A {
		A a;
		
		public A foo() {
			return [[a]];
		}
	}
]] run get-type to ClassType(A)

test reference class different [[
	class A {
		
	}
	
	class B {
		A a;
		
		public A foo() {
			return [[a]];
		}
	}
]] run get-type to ClassType(A)

test field ref [[
	class A {
		int foo;
		
		public int foo() {
			int bar;
			bar = [[foo]];
			
			return foo;
		}
	}
]] run get-type to Int()

test var ref [[
	class A {
		int foo;
		
		public int foo() {
			int bar;
			foo = [[bar]];
			return foo;
		}
	}
]] run get-type to Int()

test method ref [[
	class A {
		public int a() {
			return 1;
		}
	}
	
	class B {
		public int foo() {
			A a;
			a = new A();
			return [[a.a()]];
		}
	}
]] run get-type to Int()
