module ID

// Done and maximum points :D

// [Identifiers]
// Points earned = 3.0 out of 3.0
// Points earned = 1.5 out of 1.5
// Points earned = 5.5 out of 5.5

language MiniJava
start symbol ID

// Syntax tests

test lowercase	[[a]]	parse succeeds
test Uppercase	[[A]]	parse succeeds
test digit0		[[0]]	parse fails
test digit1		[[1]]	parse fails
test underscore [[_]]	parse fails

//test lower lower		[[bb]]	parse succeeds
// test lower upper		[[bB]]	parse succeeds
// test lower digit		[[b0]]	parse succeeds
// test lower underscore	[[b_]]	parse succeeds
// 
// test upper lower		[[Cc]]	parse succeeds
// test upper upper		[[CC]]	parse succeeds
// test upper digit		[[C1]]	parse succeeds
// test upper underscore	[[C_]]	parse succeeds
// 
// test digit lower		[[2d]]	parse fails
// test digit upper		[[2D]]	parse fails
// test digit digit		[[22]]	parse fails
// test digit underscore	[[2_]]	parse fails
// 
// test underscore lower		[[_e]]	parse fails
// test underscore upper		[[_E]]	parse fails
// test underscore digit		[[_3]]	parse fails
// test underscore underscore	[[__]]	parse fails

test multiple lower [[abcdefghijkl]]	parse succeeds
test multiple upper [[ABCDEFGHIJKL]]	parse succeeds
test multiple digit [[123456789]]		parse fails
test multiple underscore [[______]]		parse fails

test operator &&	[[&&]]	parse fails
test operator <	[[<]]	parse fails
test operator +	[[+]]	parse fails
test operator -	[[-]]	parse fails
test operator *	[[*]]	parse fails

test literal true [[true]] parse fails
test literal false [[false]] parse fails
test literal null [[null]] parse fails

test reserved abstract [[abstract]] parse fails
test reserved assert [[assert]] parse fails
test reserved boolean [[boolean]] parse fails
test reserved break [[break]] parse fails
test reserved byte [[byte]] parse fails
test reserved case [[case]] parse fails
test reserved catch [[catch]] parse fails
test reserved char [[char]] parse fails
test reserved class [[class]] parse fails
test reserved const [[const]] parse fails
test reserved continue [[continue]] parse fails
test reserved default [[default]] parse fails
test reserved do [[do]] parse fails
test reserved double [[double]] parse fails
test reserved else [[else]] parse fails
test reserved enum [[enum]] parse fails
test reserved extends [[extends]] parse fails
test reserved final [[final]] parse fails
test reserved finally [[finally]] parse fails
test reserved float [[float]] parse fails
test reserved for [[for]] parse fails
test reserved goto [[goto]] parse fails
test reserved if [[if]] parse fails
test reserved implements [[implements]] parse fails
test reserved import [[import]] parse fails
test reserved instanceof [[instanceof]] parse fails
test reserved int [[int]] parse fails
test reserved interface [[interface]] parse fails
test reserved long [[long]] parse fails
test reserved native [[native]] parse fails
test reserved new [[new]] parse fails
test reserved package [[package]] parse fails
test reserved private [[private]] parse fails
test reserved protected [[protected]] parse fails
test reserved public [[public]] parse fails
test reserved return [[return]] parse fails
test reserved short [[short]] parse fails
test reserved static [[static]] parse fails
test reserved strictfp [[strictfp]] parse fails
test reserved super [[super]] parse fails
test reserved switch [[switch]] parse fails
test reserved synchronized [[synchronized]] parse fails
test reserved this [[this]] parse fails
test reserved throw [[throw]] parse fails
test reserved throws [[throws]] parse fails
test reserved transient [[transient]] parse fails
test reserved try [[try]] parse fails
test reserved void [[void]] parse fails
test reserved volatile [[volatile]] parse fails
test reserved while [[while]] parse fails

// test random1	[[12eiom04_]]	parse fails
// test random2	[[o3ij023_]]	parse succeeds
// test random3	[[_9312i4hon]]	parse fails
// test random4	[[R8jfs8d]]		parse succeeds
// test random5	[[k8jaSAsd]]	parse succeeds

// test illegal1	[[`]]	parse fails
// test illegal2	[[~]]	parse fails
// test illegal3	[[!]]	parse fails
// test illegal4	[[@]]	parse fails
// test illegal5	[[#]]	parse fails
// test illegal6	[[$]]	parse fails
// test illegal7	[[%]]	parse fails
// test illegal8	[[^]]	parse fails
// test illegal9	[[&]]	parse fails
// test illegal10	[[*]]	parse fails
// test illegal11	[[(]]	parse fails
// test illegal12	[[)]]	parse fails
// test illegal13	[[-]]	parse fails
// test illegal14	[[=]]	parse fails
// test illegal15	[[+]]	parse fails
// test illegal16	[[{]]	parse fails
// test illegal17	[[}]]	parse fails
// test illegal18	[[ [ ]]	parse fails
// test illegal18b	[[ ] ]]	parse fails
// test illegal19	[[>]]	parse fails
// test illegal20	[[/]]	parse fails
// test illegal21	[[.]]	parse fails
// test illegal22	[[']]	parse fails
// test illegal23	[["]]	parse fails
// test illegal24	[[:]]	parse fails
// test illegal25	[[;]]	parse fails
// test illegal26	[[\]]	parse fails
// test illegal27	[[&]]	parse fails
// 
// test illegal1a	[[a`]]	parse fails
// test illegal2a	[[a~]]	parse fails
// test illegal3a	[[a!]]	parse fails
// test illegal4a	[[a@]]	parse fails
// test illegal5a	[[a#]]	parse fails
// test illegal6a	[[a$]]	parse fails
// test illegal7a	[[a%]]	parse fails
// test illegal8a	[[a^]]	parse fails
// test illegal9a	[[a&]]	parse fails
// test illegal10a	[[a*]]	parse fails
// test illegal11a	[[a(]]	parse fails
// test illegal12a	[[a)]]	parse fails
// test illegal13a	[[a-]]	parse fails
// test illegal14a	[[a=]]	parse fails
// test illegal15a	[[a+]]	parse fails
// test illegal16a	[[a{]]	parse fails
// test illegal17a	[[a}]]	parse fails
// test illegal18a	[[a\[]]	parse fails
// test illegal19a	[[a>]]	parse fails
// test illegal20a	[[a/]]	parse fails
// test illegal21a	[[a.]]	parse fails
// test illegal22a	[[a']]	parse fails
// test illegal23a	[[a"]]	parse fails
// test illegal24a	[[a:]]	parse fails
// test illegal25a	[[a;]]	parse fails
// test illegal26a	[[a\]]	parse fails
// test illegal27a	[[a&]]	parse fails

// Abstract syntax trees tests

//test ast [[a]] parse to ID("a")

// Disambiguation tests