// Done

// [Methods]
// Points earned = 1.5 out of 4.0
// Points earned = 0.0 out of 2.0
// Points earned = 0.0 out of 4.0

module test-MethodDecl

language MiniJava
start symbol MethodDecl

// Syntax tests
test method trivial [[
	public type id() {
		return true;
	}
]] parse succeeds

test method multivar [[
	public type id(id id){
		int a;
		int b;
		return true;
	}
]] parse succeeds

test method simple [[
	public type id(some param) {
		int i;
		i = i + 1;
		return i;
	}
]] parse succeeds

// This might not have been really neccesary, but it was fun
test method factorial [[
	public int factorial(int number, int precalculated_number, int precalculated_value) {
		int result;
		if(number < 2) {
			result = 1;
		} else {
			if(number < precalculated_number + 1 && precalculated_number < number + 1) {
				result = precalculated_value;
			} else {
				result = number * this.factorial(number-1, precalculated_number, precalculated_value);
			}
		}
		return result;
	}
]] parse succeeds

test method noparams [[
	public type id() {
		return true;
	}
]] parse succeeds

test method notype [[
	public id() {
		return true;
	}
]] parse fails

test method empty [[
	public int id() {
		
	}
]] parse fails

test method no return [[
	public boolean id() {
		int x;
		x = true;
	}
]] parse fails

test method variable later [[
	public type id() {
		{}
		int x;
		x = x + 1;
		return x;
	}
]] parse fails

test method no public [[
	int[] id() {
		return true;
	}
]] parse fails

test method no id [[
	public type () {
		return true;
	}
]] parse fails

test method void [[
	public void id(no param) {
		return nothing;
	}
]] parse fails

test method invalid paramlist 1 [[
	public int withparams(, param first) {
		return true;
	}
]] parse fails

test method invalid paramlist 2 [[
	public int withparams(param first, ) {
		return true;
	}
]] parse fails

test method invalid paramlist 3 [[
	public int withparams(param first param second) {
		return true;
	}
]] parse fails

test method invalid paramlist 4 [[
	public int withparams(,) {
		return true;
	}
]] parse fails

test method invalid paramlist 5 [[
	public int withparams(param first, param) {
		return true;
	}
]] parse fails

test method invalid paramlist 6 [[
	public int withparams(first) {
		return true;
	}
]] parse fails

test method return int [[
	public int method() {
		return 1;
	}
]] parse succeeds

test method return int array [[
	public int[] method() {
		return 1;
	}
]] parse succeeds

test method return boolean [[
	public boolean method() {
		return 1;
	}
]] parse succeeds

test method return id [[
	public A method() {
		return 1;
	}
]] parse succeeds

// Abstract syntax trees tests

// test method simple2 [[
// 	public type id(some param, int secondparam) {
// 		int i;
// 		i = i + 1;
// 		return i;
// 	}
// ]] parse to Method(
// 	ID("id"),
// 	ID("type"),
// 	ParamList(
// 		Variable(
// 			ID("param"),
// 			ID("some")
// 		),
// 		ParamList(
// 			Variable(
// 				ID("secondparam"),
// 				Int()
// 			)
// 		)
// 	),
// 	VariableList(
// 		Variable(
// 			ID("i"),
// 			Int()
// 		)
// 	),
// 	StatementSequence(
// 		_
// 	),
// 	_
// )

// Disambiguation tests