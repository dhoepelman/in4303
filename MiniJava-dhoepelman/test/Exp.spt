module test-Exp

language MiniJava
start symbol Exp

/////////////////////////
// Syntax tests
/////////////////////////

test empty [[]] parse fails
test this [[this]] parse succeeds

test exp and exp [[1 && a]] parse succeeds
test exp lt exp [[true < a]] parse succeeds
test exp plus exp [[1 + x]] parse succeeds
test exp min exp [[this - true]] parse succeeds
test exp mul exp [[c * 9]] parse succeeds

test exp bracket exp [[a[1] ]] parse succeeds
test exp length [[a.length]] parse succeeds
test exp id call [[a.b()]] parse succeeds
test exp id call exp [[a.b(c)]] parse succeeds
test exp id call expl [[a.b(c,d)]] parse succeeds
test invalid call 1 [[a.b(,)]] parse fails
test invalid call 2 [[a.b(c,)]] parse fails
test invalid call 3 [[a.b(,c)]] parse fails

test INTEGER_LITERAL [[1]] parse succeeds
test invalid int [[-1]] parse fails
test true [[true]] parse succeeds
test false [[false]] parse succeeds

test arrayindex [[ a[1] ]] parse suceeeds
test arrayindex 2 [[ a[1+1] ]] parse succeeds
test arrayindex 3 [[ a[!b] ]] parse succeeds

test ID lowercase	[[a]]	parse succeeds
test ID Uppercase	[[A]]	parse succeeds
// test digit0		[[0]]	parse succeeds
// test digit1		[[1]]	parse succeeds
// test ID underscore [[_]]	parse fails
test ID lower lower		[[bb]]	parse succeeds
// test ID lower upper		[[bB]]	parse succeeds
// test ID lower digit		[[b0]]	parse succeeds
// test ID lower underscore	[[b_]]	parse succeeds

test new int exp [[new int[1] ]] parse succeeds
test new id [[ new A() ]] parse succeeds
test not exp [[!1]] parse succeeds

test parentheses [[(1)]] parse succeeds
test mismatched parentheses 1 [[(1]] parse fails
test mistmatched parentheses 2 [[1)]] parse fails
test empty parentheses [[()]] parse fails
test parentheses add [[(a + b)]] parse succeeds

// Some valid java expressions that are invalid in MiniJava, assignments are below
test null [[null]] parse fails
// test boolean array [[ new boolean[5] ]] parse fails
// test byte array [[new byte[5] ]] parse fails
// test char array [[new char[5] ]] parse fails
// test double array [[new double[5] ]] parse fails
// test long array [[new long[5] ]] parse fails
// test short array [[new short[5] ]] parse fails
// test object array [[new A[5] ]] parse fails

// Other arrays

// nested

test nexted exp [[1 + 1 + 1]] parse succeeds

// All of Java's operators that don't exist in MiniJava
// postfix
// test expr++ [[i++]] parse fails
// test expr-- [[i--]] parse fails
// test ++expr [[++i]] parse fails
// test --expr [[--i]] parse fails
// test +expr [[+i]] parse fails
// test -expr [[-i]] parse fails
// test ~ [[~i]] parse fails
// // multiplicative
// test / [[1 / 1]] parse fails
// test % [[1 % 1]] parse fails
// // shift
// test << [[1 << 1]] parse fails
// test >> [[1 >> 1]] parse fails
// test >>> [[1 >>> 1]] parse fails
// // relational
// test > [[1 > 1]] parse fails
// test <= [[1 <= 1]] parse fails
// test >= [[1 >= 1]] parse fails
// test instanceof [[1 instanceof 1]] parse fails
// // equality
// test == [[1 == 1]] parse fails
// test != [[1 != 1]] parse fails
// // bitwise and locical
// test & [[1 & 1]] parse fails
// test ^ [[1 ^ 1]] parse fails
// test | [[1 | 1]] parse fails
// test || [[true || false]] parse fails
// // ternary
// test ? [[true?true]] parse fails
// test : [[true?true:false]] parse fails
// // assignment, these are actually only in Statement not in Exp but won't hurt here
// // After all in Java you can do a = (b = c)
// test = [[i = 1]] parse fails
// test += [[i += 1]] parse fails
// test -= [[i -= 1]] parse fails
// test *= [[i *= 1]] parse fails
// test /= [[i /= 1]] parse fails
// test %= [[i %= 1]] parse fails
// test &= [[i &= 1]] parse fails
// test ^= [[i ^= 1]] parse fails
// test |= [[i |= 1]] parse fails
// test <<= [[i <<= 1]] parse fails
// test >>= [[i >>= 1]] parse fails
// test >>= [[i >>= 1]] parse fails

/////////////////////////
// Abstract syntax trees tests
/////////////////////////

// test ast exp and exp [[1 && a]] parse to And(_,_)
// test ast exp lt exp [[true < a]] parse to LessThan(BooleanLiteral(True()),ID("a"))
// test ast exp plus exp [[1 + x]] parse to Addition(IntLiteral("1"),ID("x"))
// test ast exp min exp [[this - true]] parse to Minus(This(),BooleanLiteral(True()))
// test ast exp mul exp [[c * 9]] parse to Multiplication(_,_)
// 
// test ast exp bracket exp [[a[1] ]] parse to ArrayAccess(ID("a"),Const("1"))
// test ast exp length [[a.length]] parse to ArrayLength(ID("a"))
// test ast exp id call [[a.b()]] parse to Call(ID("a"),ID("b"))
// test ast exp id call exp [[a.b(c)]] parse to Call(ID("a"),ID(b),CallArguments(ID("c")))
// test ast exp id call expl [[a.b(c,d)]] parse to Call(ID("a"),ID("b"),CallArguments(ID("c"),ID("d")))
// 
// test ast INTEGER_LITERAL [[1]] parse to Const("1")
// test ast true [[true]] parse to Const("true")
// test ast false [[false]] parse to Const("false")
// 
// test ast ID [[a]] parse to ID("a")
// 
// test ast new int exp [[new int[1] ]] parse to NewArray(Const("1"))
// test ast new id [[new id()]] parse to NewObject(ID("id"))
// test ast not exp [[!1]] parse to Not(IntLiteral("1"))
// 
// test ast parentheses [[(1 + 1)]] parse to [[1 + 1]]

/////////////////////////
// Disambiguation tests
/////////////////////////


// Everything is tested from highest to lowest precedence.
// By induction we can prove than the precedence is correct if all of these precedences are correct
test access precedence		[[!a.length]] parse to [[!(a.length)]]
// This isn't a very good test, but there doesn't seem much ambiguity possible with . in MiniJava
test access assocosiation	[[a.length.length]] parse to [[(a.length).length]]

test not precedence			[[!a * b]]	parse to [[(!a) * b]]
// This isn't a very good test, but there doesn't seem much ambiguity possible with ! in MiniJava
test not associative		[[!!a]] parse to [[!(!a)]]

test mul precedence			[[1 + 2 * 3]] parse to [[1 + (2 * 3)]]
test mul associative		[[a * b * c]] parse to [[(a * b) * c]]

test plus precedence		[[a < b + c]] parse to [[a < (b + c)]]
test min precedence			[[a < b - c]] parse to [[a < (b - c)]]
test plus association		[[a + b + c]] parse to [[(a + b) + c]]
test min association		[[a - b - c]] parse to [[(a - b) - c]]
test plusmin association	[[a + b - c]] parse to [[(a + b) - c]]
test minplus association	[[a - b + c]] parse to [[(a - b) + c]]

test lessthan precedence	[[b < c && a]] parse to [[(b < c) && a]]
test lessthan association	[[a < b < c]] parse to [[(a < b) < c]]

// and is lowest in precedence so has no precedence test
test and association		[[a && b && c]] parse to [[(a && b) && c]]