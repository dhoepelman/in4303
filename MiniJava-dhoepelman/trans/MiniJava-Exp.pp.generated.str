module MiniJava-Exp.pp.generated

strategies
  prettyprint-Exp :
    And(a, b) -> [ H(
                     [SOpt(HS(), "0")]
                   , [a0, S(" && "), b0]
                   )
                 ]
    where a0 := <pp-one-Z(prettyprint-Exp)> a
    where b0 := <pp-one-Z(prettyprint-Exp)> b

  prettyprint-Exp :
    Addition(a, b) -> [ H(
                          [SOpt(HS(), "0")]
                        , [a1, S(" + "), b1]
                        )
                      ]
    where a1 := <pp-one-Z(prettyprint-Exp)> a
    where b1 := <pp-one-Z(prettyprint-Exp)> b

  prettyprint-Exp :
    LessThan(a, b) -> [ H(
                          [SOpt(HS(), "0")]
                        , [a2, S(" < "), b2]
                        )
                      ]
    where a2 := <pp-one-Z(prettyprint-Exp)> a
    where b2 := <pp-one-Z(prettyprint-Exp)> b

  prettyprint-Exp :
    Minus(a, b) -> [ H(
                       [SOpt(HS(), "0")]
                     , [a3, S(" - "), b3]
                     )
                   ]
    where a3 := <pp-one-Z(prettyprint-Exp)> a
    where b3 := <pp-one-Z(prettyprint-Exp)> b

  prettyprint-Exp :
    Multiplication(a, b) -> [ H(
                                [SOpt(HS(), "0")]
                              , [a4, S(" * "), b4]
                              )
                            ]
    where a4 := <pp-one-Z(prettyprint-Exp)> a
    where b4 := <pp-one-Z(prettyprint-Exp)> b

  prettyprint-Exp :
    ArrayIndex(a, b) -> [ H(
                            [SOpt(HS(), "0")]
                          , [ a5
                            , S("[")
                            , b5
                            , S("]")
                            ]
                          )
                        ]
    where a5 := <pp-one-Z(prettyprint-Exp)> a
    where b5 := <pp-one-Z(prettyprint-Exp)> b

  prettyprint-Exp :
    ArrayLength(a) -> [ H(
                          [SOpt(HS(), "0")]
                        , [a6, S(".length")]
                        )
                      ]
    where a6 := <pp-one-Z(prettyprint-Exp)> a

  prettyprint-Exp :
    MethodCall(a, b, c) -> [ H(
                               [SOpt(HS(), "0")]
                             , [ a7
                               , S(".")
                               , b6
                               , S("(")
                               , c0
                               , S(")")
                               ]
                             )
                           ]
    where a7 := <pp-one-Z(prettyprint-Exp)> a
    where b6 := <pp-one-Z(prettyprint-ID)> b
    where c0 := <pp-H-list(prettyprint-Exp|",")> c

  prettyprint-Exp :
    INT(a) -> [ H(
                  [SOpt(HS(), "0")]
                , [a8]
                )
              ]
    where a8 := <pp-one-Z(prettyprint-INT)> a

  prettyprint-Exp :
    BOOLEAN(a) -> [ H(
                      [SOpt(HS(), "0")]
                    , [a9]
                    )
                  ]
    where a9 := <pp-one-Z(prettyprint-BOOLEAN)> a

  prettyprint-Exp :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a10]
           )
         ]
    where a10 := <pp-one-Z(prettyprint-VarReference)> a

  prettyprint-Exp :
    This() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("this")]
                )
              ]

  prettyprint-Exp :
    NewArray(a) -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("new int["), a11, S("]")]
                     )
                   ]
    where a11 := <pp-one-Z(prettyprint-Exp)> a

  prettyprint-Exp :
    NewObject(a) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("new "), a12, S("()")]
                      )
                    ]
    where a12 := <pp-one-Z(prettyprint-ClassReference)> a

  prettyprint-Exp :
    Not(a) -> [ H(
                  [SOpt(HS(), "0")]
                , [S("!"), a13]
                )
              ]
    where a13 := <pp-one-Z(prettyprint-Exp)> a

  prettyprint-example =
    prettyprint-Exp