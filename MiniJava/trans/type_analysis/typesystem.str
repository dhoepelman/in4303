module trans/type_analysis/typesystem

imports
  lib/runtime/nabl/-
  lib/runtime/task/-
  lib/runtime/types/-
  lib/runtime/properties/-
  
  assignment1/MiniJava
  analysis/desugar
  analysis/analysis_constructors
  
  type_analysis/types.generated
  
rules
  
  // Literals and object creations are defined in types.ts
  
  // Unary operator, see types.ts
  // Binary operator, see types.ts
  
  // References
  // References, see types.ts
    
  // This binding
  // TODO: Fix invalid this assignments not giving an error
  create-type-task(|ctx): 
  e -> <type-is(|ctx, [task])> task
  where
    This() := e
  ; task   := <type-lookup(|ctx)> e
  
  /* Methods */
  // Call binding
   create-type-task(|ctx) :
    Call(exp, callee, args) -> <type-is(|ctx, [task_cMethodType, task_ReturnType, task_expectedPTypes])> task_ReturnType
    where	task_cMethodType	:= <type-lookup(|ctx)> callee
    	;	task_ReturnType		:= <new-task(|ctx)> Rewrite("return-type", task_cMethodType)
    	;	task_expectedPTypes	:= <new-task(|ctx)> Rewrite("parameter-types", task_cMethodType)
    	;	targs				:= <type-task(|ctx)> args
    	;	parammatch			:= <type-match(|ctx, task_expectedPTypes)> targs;
    	 							<task-create-error-on-failure(|ctx, parammatch, "Invalid number of arguments or incompatible argument type(s)")> args
   
   /*
   create-type-task(|ctx) :
    Call(exp, callee, params) -> <type-is(|ctx, [methodtype, t2, rettype, expectedparamtypes, tparams, eq3])> rettype
    where methodtype := <type-lookup(|ctx)> callee;
          t2 := <type-task(|ctx)> methodtype;
          rettype := <new-task(|ctx)> Rewrite("proj0", t2);
          expectedparamtypes := <new-task(|ctx)> Rewrite("proj1", t2);
          tparams := <type-task(|ctx)> params;
          eq3 := <type-match(|ctx, expectedparamtypes)> tparams;
          <task-create-error-on-failure(|ctx, eq3, "Incompatible parameter types")> params
    */	 	
   task-rewrite:
   		("return-type", compositeMethodType) -> ret
   		where (ret, _) := compositeMethodType
   task-rewrite:
   		("parameter-types", compositeMethodType) -> ptypes
   		where (_, ptypes) := compositeMethodType