module trans/type_analysis/types.generated

imports
  lib/runtime/nabl/-
  lib/runtime/task/-
  lib/runtime/types/-
  lib/runtime/properties/-
  
  
rules
  
  create-type-task(|ctx) :
    IntValue(v) -> <type-is(|ctx, [])> Int()
    where id
  
  create-type-task(|ctx) :
    True() -> <type-is(|ctx, [])> Bool()
    where id
  
  create-type-task(|ctx) :
    False() -> <type-is(|ctx, [])> Bool()
    where id
  
  create-type-task(|ctx) :
    NewObject(c) -> <type-is(|ctx, [])> ClassType(c)
    where id
  
  create-type-task(|ctx) :
    UnExp(operator, exp) -> <type-is(|ctx, [ety1, t62, ty1, ty, eq346])> ty
    where ety1 := <type-task(|ctx)> exp;
          t62 := <type-task(|ctx)> operator;
          ty1 := <new-task(|ctx)> Rewrite("proj190", t62);
          ty := <new-task(|ctx)> Rewrite("proj191", t62);
          eq346 := <type-match(|ctx, ty1)> ety1;
          <task-create-error-on-failure(|ctx, eq346, "Incompatible type")> exp
  
  create-type-task(|ctx) :
    Negation() -> <type-is(|ctx, [])> (Bool(), Bool())
    where id
  
  create-type-task(|ctx) :
    ArrayLength() -> <type-is(|ctx, [])> (IntArray(), Int())
    where id
  
  create-type-task(|ctx) :
    AllocateArray() -> <type-is(|ctx, [])> (Int(), IntArray())
    where id
  
  create-type-task(|ctx) :
    BinExp(operator, subexp1, subexp2) -> <type-is(|ctx, [ety1, ety2, t63, ty1, ty2, ty, eq347, eq348])> ty
    where ety1 := <type-task(|ctx)> subexp1;
          ety2 := <type-task(|ctx)> subexp2;
          t63 := <type-task(|ctx)> operator;
          ty1 := <new-task(|ctx)> Rewrite("proj187", t63);
          ty2 := <new-task(|ctx)> Rewrite("proj188", t63);
          ty := <new-task(|ctx)> Rewrite("proj189", t63);
          eq347 := <type-match(|ctx, ty1)> ety1;
          <task-create-error-on-failure(|ctx, eq347, "Incompatible type")> subexp1;
          eq348 := <type-match(|ctx, ty2)> ety2;
          <task-create-error-on-failure(|ctx, eq348, "Incompatible type")> subexp2
  
  create-type-task(|ctx) :
    LogicalAnd() -> <type-is(|ctx, [])> (Bool(), Bool(), Bool())
    where id
  
  create-type-task(|ctx) :
    LessThan() -> <type-is(|ctx, [])> (Int(), Int(), Bool())
    where id
  
  create-type-task(|ctx) :
    Times() -> <type-is(|ctx, [])> (Int(), Int(), Int())
    where id
  
  create-type-task(|ctx) :
    Minus() -> <type-is(|ctx, [])> (Int(), Int(), Int())
    where id
  
  create-type-task(|ctx) :
    Plus() -> <type-is(|ctx, [])> (Int(), Int(), Int())
    where id
  
  create-type-task(|ctx) :
    ArrayAccess() -> <type-is(|ctx, [])> (IntArray(), Int(), Int())
    where id
  
  create-type-task(|ctx) :
    VarRef(r) -> <type-is(|ctx, [ty])> ty
    where ty := <type-lookup(|ctx)> r
  
  create-type-task(|ctx) :
    Param(t, name) -> <type-is(|ctx, [])> t
    where id
  
  nabl-constraint(|ctx) :
    ArrayAssign(var, idx, exp) -> <fail>
    where tvar := <type-lookup(|ctx)> var;
          tidx := <type-task(|ctx)> idx;
          texp := <type-task(|ctx)> exp;
          eq349 := <type-match(|ctx, IntArray())> tvar;
          <task-create-error-on-failure(|ctx, eq349, "Not an array")> var;
          eq350 := <type-match(|ctx, Int())> tidx;
          <task-create-error-on-failure(|ctx, eq350, "Array index needs to be an integer")> idx;
          eq351 := <type-match(|ctx, Int())> texp;
          <task-create-error-on-failure(|ctx, eq351, "Incompatible array and expression type")> exp
  
  nabl-constraint(|ctx) :
    Assign(var, exp) -> <fail>
    where tvar := <type-lookup(|ctx)> var;
          texp := <type-task(|ctx)> exp;
          subtype68 := <create-subtype-task(|ctx)>("<:", texp, tvar);
          <task-create-error-on-failure(|ctx, subtype68, "Incompatible variable and expression type")> exp
  
  nabl-constraint(|ctx) :
    Print(exp) -> <fail>
    where texp := <type-task(|ctx)> exp;
          eq352 := <type-match(|ctx, Int())> texp;
          <task-create-error-on-failure(|ctx, eq352, "Incompatible expression type: can only print integers")> exp
  
  nabl-constraint(|ctx) :
    While(exp, statements) -> <fail>
    where texp := <type-task(|ctx)> exp;
          eq353 := <type-match(|ctx, Bool())> texp;
          <task-create-error-on-failure(|ctx, eq353, "Incompatible expression type: condition must be boolean")> exp
  
  nabl-constraint(|ctx) :
    If(exp, ifstmt, elsestmt) -> <fail>
    where texp := <type-task(|ctx)> exp;
          eq354 := <type-match(|ctx, Bool())> texp;
          <task-create-error-on-failure(|ctx, eq354, "Incompatible expression type: condition must be boolean")> exp
  
  nabl-constraint(|ctx) :
    Method(treturn, mname, params, vars, statements, retexp) -> <fail>
    where tretexp := <type-task(|ctx)> retexp;
          subtype69 := <create-subtype-task(|ctx)>("<:", tretexp, treturn);
          <task-create-error-on-failure(|ctx, subtype69, "Incompatible return and expression type")> retexp
  
  create-type-task(|ctx) :
    None() -> <type-is(|ctx, [])> Top()
    where id
  
  create-subtype-task(|ctx) :
    ("<:", type-used, type-expected) -> or31
    where eq355 := <type-match(|ctx, type-expected)> type-used;
          cused := <new-task(|ctx)> Rewrite("proj186", type-used);
          parenttype := <type-lookup(|ctx)> cused;
          eq356 := <type-match(|ctx, parenttype)> type-expected;
          or31 := <new-task(|ctx)> Choice([eq355,eq356])
  
  
rules // projections
  
  task-rewrite :
    ("proj191", (ty1, ty)) -> ty
  
  task-rewrite :
    ("proj190", (ty1, ty)) -> ty1
  
  task-rewrite :
    ("proj189", (ty1, ty2, ty)) -> ty
  
  task-rewrite :
    ("proj188", (ty1, ty2, ty)) -> ty2
  
  task-rewrite :
    ("proj187", (ty1, ty2, ty)) -> ty1
  
  task-rewrite :
    ("proj186", ClassType(cused)) -> cused
  
