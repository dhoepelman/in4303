module trans/type_analysis/types.generated

imports
  lib/runtime/nabl/-
  lib/runtime/task/-
  lib/runtime/types/-
  lib/runtime/properties/-
  
  
rules
  
  create-type-task(|ctx) :
    IntValue(v) -> <type-is(|ctx, [])> Int()
    where id
  
  create-type-task(|ctx) :
    True() -> <type-is(|ctx, [])> Bool()
    where id
  
  create-type-task(|ctx) :
    False() -> <type-is(|ctx, [])> Bool()
    where id
  
  create-type-task(|ctx) :
    NewObject(c) -> <type-is(|ctx, [])> ClassType(c)
    where id
  
  create-type-task(|ctx) :
    UnExp(operator, exp) -> <type-is(|ctx, [ety1, t22, ty1, ty, eq104])> ty
    where ety1 := <type-task(|ctx)> exp;
          t22 := <type-task(|ctx)> operator;
          ty1 := <new-task(|ctx)> Rewrite("proj63", t22);
          ty := <new-task(|ctx)> Rewrite("proj64", t22);
          eq104 := <type-match(|ctx, ty1)> ety1;
          <task-create-error-on-failure(|ctx, eq104, "Incompatible type")> exp
  
  create-type-task(|ctx) :
    Negation() -> <type-is(|ctx, [])> (Bool(), Bool())
    where id
  
  create-type-task(|ctx) :
    ArrayLength() -> <type-is(|ctx, [])> (IntArray(), Int())
    where id
  
  create-type-task(|ctx) :
    AllocateArray() -> <type-is(|ctx, [])> (Int(), IntArray())
    where id
  
  create-type-task(|ctx) :
    BinExp(operator, subexp1, subexp2) -> <type-is(|ctx, [ety1, ety2, t23, ty1, ty2, ty, eq105, eq106])> ty
    where ety1 := <type-task(|ctx)> subexp1;
          ety2 := <type-task(|ctx)> subexp2;
          t23 := <type-task(|ctx)> operator;
          ty1 := <new-task(|ctx)> Rewrite("proj60", t23);
          ty2 := <new-task(|ctx)> Rewrite("proj61", t23);
          ty := <new-task(|ctx)> Rewrite("proj62", t23);
          eq105 := <type-match(|ctx, ty1)> ety1;
          <task-create-error-on-failure(|ctx, eq105, "Incompatible type")> subexp1;
          eq106 := <type-match(|ctx, ty2)> ety2;
          <task-create-error-on-failure(|ctx, eq106, "Incompatible type")> subexp2
  
  create-type-task(|ctx) :
    LogicalAnd() -> <type-is(|ctx, [])> (Bool(), Bool(), Bool())
    where id
  
  create-type-task(|ctx) :
    LessThan() -> <type-is(|ctx, [])> (Int(), Int(), Bool())
    where id
  
  create-type-task(|ctx) :
    Times() -> <type-is(|ctx, [])> (Int(), Int(), Int())
    where id
  
  create-type-task(|ctx) :
    Minus() -> <type-is(|ctx, [])> (Int(), Int(), Int())
    where id
  
  create-type-task(|ctx) :
    Plus() -> <type-is(|ctx, [])> (Int(), Int(), Int())
    where id
  
  create-type-task(|ctx) :
    ArrayAccess() -> <type-is(|ctx, [])> (IntArray(), Int(), Int())
    where id
  
  create-type-task(|ctx) :
    VarRef(r) -> <type-is(|ctx, [ty])> ty
    where ty := <type-lookup(|ctx)> r
  
  nabl-constraint(|ctx) :
    ArrayAssign(var, idx, exp) -> <fail>
    where tvar := <type-lookup(|ctx)> var;
          tidx := <type-task(|ctx)> idx;
          texp := <type-task(|ctx)> exp;
          eq107 := <type-match(|ctx, IntArray())> tvar;
          <task-create-error-on-failure(|ctx, eq107, "Not an array")> var;
          eq108 := <type-match(|ctx, Int())> tidx;
          <task-create-error-on-failure(|ctx, eq108, "Array index needs to be an integer")> idx;
          eq109 := <type-match(|ctx, Int())> texp;
          <task-create-error-on-failure(|ctx, eq109, "Incompatible array and expression type")> exp
  
  nabl-constraint(|ctx) :
    Assign(var, exp) -> <fail>
    where t := <type-lookup(|ctx)> var;
          texp := <type-task(|ctx)> exp;
          eq110 := <type-match(|ctx, t)> texp;
          <task-create-error-on-failure(|ctx, eq110, "Incompatible variable and expression type")> exp
  
  nabl-constraint(|ctx) :
    Print(exp) -> <fail>
    where texp := <type-task(|ctx)> exp;
          eq111 := <type-match(|ctx, Int())> texp;
          <task-create-error-on-failure(|ctx, eq111, "Incompatible expression type: can only print integers")> exp
  
  nabl-constraint(|ctx) :
    While(exp, statements) -> <fail>
    where texp := <type-task(|ctx)> exp;
          eq112 := <type-match(|ctx, Bool())> texp;
          <task-create-error-on-failure(|ctx, eq112, "Incompatible expression type: condition must be boolean")> exp
  
  nabl-constraint(|ctx) :
    If(exp, ifstmt, elsestmt) -> <fail>
    where texp := <type-task(|ctx)> exp;
          eq113 := <type-match(|ctx, Bool())> texp;
          <task-create-error-on-failure(|ctx, eq113, "Incompatible expression type: condition must be boolean")> exp
  
  nabl-constraint(|ctx) :
    Method(treturn, mname, params, vars, statements, retexp) -> <fail>
    where tretexp := <type-task(|ctx)> retexp;
          eq114 := <type-match(|ctx, treturn)> tretexp;
          <task-create-error-on-failure(|ctx, eq114, "Incompatible return and expression type")> retexp
  
  
rules // projections
  
  task-rewrite :
    ("proj64", (ty1, ty)) -> ty
  
  task-rewrite :
    ("proj63", (ty1, ty)) -> ty1
  
  task-rewrite :
    ("proj62", (ty1, ty2, ty)) -> ty
  
  task-rewrite :
    ("proj61", (ty1, ty2, ty)) -> ty2
  
  task-rewrite :
    ("proj60", (ty1, ty2, ty)) -> ty1
  
