module trans/type_analysis/typesystem-inheritance

imports
  lib/runtime/nabl/-
  lib/runtime/task/-
  lib/runtime/types/-
  lib/runtime/properties/-
  
  assignment1/MiniJava
  analysis/desugar
  analysis/analysis_constructors
  
  type_analysis/types.generated
  type_analysis/typesystem

signature constructors
  Top: Type
  
rules
	
	 
  /**************
   * Method overloading and overriding
   **************/
  nabl-constraint(|ctx):
		Method(rettype, m, params, _, _, _) -> <fail>
		where
				// Check for method in superclass
				task_superm			:= <nabl-lookup-local-import(|ctx)> m
				// lookup superclass method type
			;	task_cSuperMethodType	:= <type-lookup(|ctx)> task_superm
			;	task_superReturnType	:= <new-task(|ctx)> Rewrite("return-type", task_cSuperMethodType)
			;	task_superParamTypes	:= <new-task(|ctx)> Rewrite("parameter-types", task_cSuperMethodType)
			 	// Get the new method parameter types and compare
    		;	tparams	   := <type-task(|ctx)> params
    		;	parammatch := <type-match(|ctx, task_superParamTypes)> tparams
    		 	// Compare return types
    		;	retmatch:= <type-match(|ctx, task_superReturnType)> rettype
			 	// Create error(s) and note(s)
			;	msgoverload	:= ["Cannot overload superclass method ", m]
			;	msgoverride	:= ["Method ", m, " overrides superclass method of the same name"]
			;	msginvreturn:= ["Method ", m, " overrides superclass method and must return compatible types"]
			;	<task-create-error-on-triggers(|ctx, [Success(task_superm), Failure(parammatch)], msgoverload)> m
			;	<task-create-error-on-triggers(|ctx, [Success(task_superm), Success(parammatch), Failure(retmatch)], msginvreturn)> m
			;	<task-create-note-on-triggers(|ctx, [Success(task_superm), Success(parammatch), Success(retmatch)], msgoverride)> m
   	
   	/***********
   	 * Subtyping
   	 ***********/
   	 
   	/*create-subtype-task(|ctx) :
    ("<:", ty1, ty2) -> t
    where
    	 <not(is-list)> ty1
    	;<not(is-list)> ty2
    where equiv-match	:= <type-match(|ctx, ty2)> ty1;
          class-name	:= <new-task(|ctx)> Rewrite("classtype-to-class", ty1);	// Extract class name
       //  	class-name	:= "B";
         	parenttype	:= <type-lookup(|ctx)> class-name;
          	subtype-match	:= <type-match(|ctx, parenttype)> ty2;
       		t := <new-task(|ctx)> Choice([equiv-match,subtype-match])
          
      task-rewrite :
    ("classtype-to-class", ClassType(parentname)) -> parentname*/
   	 
			 	
	/*** Boilerplate code: rules for subtyping ***/

	create-subtype-task(|ctx):
	  ("<list:", t1*, t2*) -> <type-is(|ctx, [m])> t*
	  where 
	     t* := <zip(create-subtype-task(|ctx, "<:"))> (t1*, t2*)
	  <+ t* := <map-with-index(create-subtype-task(|ctx, "<:", t2*))> t1*
	   ; l  := <new-task(|ctx)> Length(t2*)
	   ; m  := <type-match(|ctx, <length> t1*)> l 
	
	create-subtype-task(|ctx, op):
	  (t1, t2) -> <create-subtype-task(|ctx)> (op, t1, t2)
	
	create-subtype-task(|ctx, op, t*):
	  (i, t) -> st
	  where
	    t' := <new-task(|ctx)> Index(i, t*)
	  ; st := <create-subtype-task(|ctx)> (op, t, t')