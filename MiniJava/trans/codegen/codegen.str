module codegen/codegen

imports
  
  milestone1/MiniJava
  milestone2/MiniJava.core
  lib/jasmin/JasminXT
  trans/codegen/-
  libstratego-lib
  libstratego-aterm
  lib/runtime/nabl/-
  lib/runtime/types/-
  
rules	// Transform MiniJava AST into JasminXT
  
  // For debugging
  to-jbc = program-to-jbc + class-to-jbc + stmt-to-jbc + exp-to-jbc
  
  /** Program     : MainClass * List(ClassDecl) **/
  program-to-jbc: Program(mainc, classes*) -> [<class-to-jbc> mainc | <map(class-to-jbc)>classes*]
  
  type-to-jbc: IntArray() -> Array(Int())
  type-to-jbc: Bool() -> Boolean()
  type-to-jbc: Int() -> Int()
  type-to-jbc: ClassType(cname) -> Reference(CRef(<strip-annos>cname))
  
rules	// Helper rules
	
  parentname: None() -> "java/lang/Object"
  parentname: Parent(p)	-> <strip-annos>p
  
  // Deprecated, use type-to-jbc
  mjvtype-to-jtype: IntArray() -> Array(Int())
  mjvtype-to-jtype: Bool() -> Boolean()
  mjvtype-to-jtype: Int() -> Int()
  mjvtype-to-jtype: ClassType(cname) -> Reference(CRef(<strip-annos>cname))
  
  // Field ref shorthand
  fieldref: fname -> FIELDREF(<nabl-uri; nabl-uri-parent; nabl-uri-name> fname,
  						  <strip-annos>fname,
  						  <get-type;type-to-jbc>fname)
        
 overlays
		  
	INVOKE-VIRTUAL(cref,mref, mdescr) =
		INVOKEVIRTUAL(
          JBCMethodRef(
            CRef(cref)
          , MRef(mref)
          , mdescr
          )
        )
        
    FIELDREF(cname,fname,ftype) = JBCFieldRef(
  			 	 CRef(cname)
  				,FRef(fname)
  				,JBCFieldDesc(ftype)
  			)