module codegen/codegen

imports
  
  milestone1/MiniJava
  milestone2/MiniJava.core
  lib/jasmin/JasminXT
  trans/codegen/-
  libstratego-lib
  libstratego-aterm
  
rules	// Transform MiniJava AST into JasminXT
  
  // For debugging
  to-jbc = program-to-jbc + class-to-jbc + stmt-to-jbc + exp-to-jbc
  
  /** Program     : MainClass * List(ClassDecl) **/
  program-to-jbc: Program(mainc, classes*) -> [<class-to-jbc> mainc | <map(class-to-jbc)>classes*]
  
  /** Class **/
  
  // MainClass   : ID * ID * Statement -> MainClass
  class-to-jbc: MainClass(cname, pname, stmt) -> JBCFile(
  	CLASS-HEADER(<strip-annos> cname, superc)
	// Fields
	, []
  	// Methods
  	, [ DEFAULT-CONSTRUCTOR(superc)
  	  , JBCMethod(
	      [PUBLIC(), STATIC()]
	    , "main"
	    , JBCMethodDesc([Array(Reference(CRef("java/lang/String")))], Void())
	    , outputstmtjbc*
	    )
  	  ]
  	)
  	where
  		stmtjbc* := <stmt-to-jbc> stmt
  	;	superc	 := <parentname> None()
  	 	// TODO: Better stack limit
  	;	outputstmtjbc* := [JBCLimitStack("100"),stmtjbc*,RETURN()]
  	
  
  // Class       : ID * ParentDecl * List(FieldDecl) * List(MethodDecl) -> ClassDecl
  class-to-jbc:	Class(cname, parent, field*, method*) ->
  	JBCFile(
  		CLASS-HEADER(<strip-annos> cname,<parentname>parent)
		// Fields
		, []
  		// Methods
  		,[DEFAULT-CONSTRUCTOR(<parentname> parent) | <map(method-to-jbc)> method*]
  	)
  
rules	// Helper rules
	
  parentname: None() -> "java/lang/Object"
  parentname: Parent(p)	-> <strip-annos>p
  
  mjvtype-to-jtype: IntArray() -> Array(Int())
  mjvtype-to-jtype: Bool() -> Boolean()
  mjvtype-to-jtype: Int() -> Int()
  mjvtype-to-jtype: ClassType(cname) -> Reference(CRef(<strip-annos>cname))


  // Should be an overlay, but I like being able to directory convert a mjv method signature to one applicabel for this
  invokevirtual: (cref, mref, (lparams, ret)) ->
  		INVOKEVIRTUAL(
          JBCMethodRef(
            CRef(cref)
          , MRef(mref)
          , JBCMethodDesc(lparams, ret)
          )
        )
        
 overlays
 	DEFAULT-CONSTRUCTOR(superc) =
	    JBCMethod(
	      [PUBLIC()]
	    , Init()
	    , JBCMethodDesc([], Void())
	    , [ JBCLimitStack("1"), JBCLimitLocals("1")
	      , ALOAD_0()
	      , INVOKE-CONSTRUCTOR(superc)
	      , RETURN()
	      ]
	    )
	
	INVOKE-CONSTRUCTOR(superc) =
		INVOKESPECIAL(
	    	JBCMethodRef(CRef(superc), MRef(Init()), JBCMethodDesc([], Void()))
	    )
	    
	CLASS-HEADER(cname, superc) =
		JBCHeader(
			    None()
			  , None()
			  , JBCClass([PUBLIC()], cname)
			  , JBCSuper(superc)
			  , []
			  , None()
			  , None()
			  , None()
		  )