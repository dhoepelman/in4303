module codegen/codegen-exp

imports
  
  milestone1/MiniJava
  milestone2/MiniJava.core
  lib/jasmin/JasminXT
  trans/codegen/-
  lib/runtime/nabl/-
  lib/runtime/types/-
  
rules
  
  // IntValue    : INT -> Exp
  exp-to-jbc: IntValue(i) -> [LDC(i)]
  
  // True        : Exp
  // False       : Exp
  exp-to-jbc: True() -> [ICONST_1()]
  exp-to-jbc: False() -> [ICONST_0()]
  
  // This
  exp-to-jbc: This() -> [ALOAD_0()]	// Local var 0 is the this object
  
  // NewObject   : ID -> Exp
  exp-to-jbc: NewObject(cname) -> out*
  	where
  		cnamesimple := <strip-annos> cname
  	;	out*	:= [
  	 		NEW(CRef(cnamesimple))	// Create new object reference
  	 		,DUP()					// Duplicate reference for constructor invocation
  	 		,INVOKESPECIAL(			// Invoke construtor
	          JBCMethodRef(CRef(cnamesimple), MRef(Init()), JBCMethodDesc([], Void()))
	        )
  	 ]
  
  // Call        : Exp * ID * List(Exp) -> Exp
  exp-to-jbc: Call(e, mname, params*) -> out*
  	where
  		ejbc*	:= <exp-to-jbc> e
  	//;	mjvrettype	:= <get-type> mname
  	//;	<debug> mjvrettype
  	//;	jrettype	:= <mjvtype-to-jtype> mname
  	//;	<debug> jrettype
  	;	out*	:= [ejbc*,	// Put expression result on stack
  	 	<invokevirtual> (
  	 			<nabl-uri; nabl-uri-parent; nabl-uri-name> mname,	// Class name
  	 			<strip-annos>mname,									// Method name
  	 			<get-type;mjvmethodtype-to-jbcmethodtype> mname)	// Parameter and Return type
  	 ]
  mjvmethodtype-to-jbcmethodtype: (paramtypes*, rettype) -> (<map(mjvtype-to-jtype)>paramtypes*, <mjvtype-to-jtype>rettype)
  
  
  //UnExp     : UnOp * Exp -> Exp
  exp-to-jbc: UnExp(op, e) -> <concat> [<exp-to-jbc>e,<op-to-jbc>op]
  
  //BinExp    : BinOp * Exp * Exp -> Exp
  exp-to-jbc: BinExp(op, e1, e2) -> <concat>[<exp-to-jbc>e1,<exp-to-jbc>e2,<op-to-jbc>op]
  // And recieves special treatment because of lazy evaluation
  exp-to-jbc: BinExp(And(), e1, e2) -> out*
  	where
  		<debug> "entering And() exp-to-jbc"
  	;	falselbl := <newname> "false_"
  	;	endlbl	 := <newname> "end_"
  	;	out_e1*	 := <exp-to-jbc>e1
  	;	out_e2*	 := <exp-to-jbc>e2	
  	;	out*	 := [
  			out_e1*,
  			IFEQ(LabelRef(falselbl)),
  				out_e2*,
  				IFEQ(LabelRef(falselbl)),
  					ICONST_1(),
  					GOTO(LabelRef(endlbl)),
  			JBCLabel(falselbl),
  			ICONST_0(),
  			JBCLabel(endlbl)
  		]
  
  /** Operators **/
  //  Not      : UnOp
  //  !value == value ^ 1
  op-to-jbc: Not() -> [ICONST_1(), IXOR()]
  // Length    : UnOp
  op-to-jbc: Length() -> [ARRAYLENGTH()]
  // NewArray  : UnOp
  op-to-jbc: NewArray() -> [NEWARRAY(Int())]
  
  // Plus      : BinOp
  op-to-jbc: Plus() -> [IADD()]
  // Minus     : BinOp
  op-to-jbc: Minus() -> [ISUB()]
  // Times     : BinOp
  op-to-jbc: Times() -> [IMUL()]
  // Subscript : BinOp
  op-to-jbc: Subscript() -> [IALOAD()]
  // Lt        : BinOp
  // a < b is equivalent to (a - b) >>> 31
  // This never overflows because MiniJava is restricted to 31-bit unsigned integers
  op-to-jbc: Lt() -> [ISUB(), LDC(31), IUSHR()]
  
  
  