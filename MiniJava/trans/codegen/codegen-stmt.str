module codegen/codegen-stmt

imports
  
  milestone1/MiniJava
  milestone2/MiniJava.core
  lib/jasmin/JasminXT
  trans/codegen/-
  lib/runtime/nabl/-
  lib/runtime/types/-

rules  
	/** Statements **/
  //  Print       : Exp -> Statement
  stmt-to-jbc:	Print(e) -> stmt*
  	where
  		exp* := <exp-to-jbc> e
  	;	stmt* := [
	  			  GET-STATIC("java/lang/System", "out", "java/io/PrintStream")
	  			 ,exp*
	  			 ,INVOKE-VIRTUAL("java/io/PrintStream", "println", JBCMethodDesc([Int()], Void()) )
	  			 ]
	  		
  // Block       : List(Statement) -> Statement
  stmt-to-jbc: Block(stmtl)	-> <map(stmt-to-jbc) ; concat> stmtl
  
  // If          : Exp * Statement * Statement -> Statement
  stmt-to-jbc: If(e, ifs, elses) -> out*
  where
  	out_e*		:= <exp-to-jbc> e
  ;	out_ifs*	:= <stmt-to-jbc> ifs
  ; out_elses*	:= <stmt-to-jbc> elses
  ;	elselbl		:= <newname> "else_"
  ;	endiflbl	:= <newname> "end_"
  ; out*		:= [
  					// Execute the expression, this should leave a result on the stack
  					  out_e*
  					// Compare == 0, 0 == false so jump to else if 0
  					, IFEQ(LabelRef(elselbl))
  					, out_ifs*
  					, GOTO(LabelRef(endiflbl))
  					, JBCLabel(elselbl)
  					, out_elses*
  					, JBCLabel(endiflbl)
  				   ]
  		
  // While       : Exp * Statement -> Statement
   stmt-to-jbc: While(e, stmt) -> out*
   where
	 	out_e*		:= <exp-to-jbc> e
	  ; out_stmt*	:= <stmt-to-jbc> stmt
	  ;	loopcondlbl	:= <newname> "loopcond_"
	  ;	loopbodylbl	:= <newname> "loop_"
	  ; out*		:= [
	    				  // It is more efficient to jump to the condition here, as it decreases the number of jumps in loop execution from 2 to 1
	    				  GOTO(LabelRef(loopcondlbl))
	    				  // Define the loop body start
	    				, JBCLabel(loopbodylbl)
	  					, out_stmt*
	  					, JBCLabel(loopcondlbl)
	  					  // Execute the expression, this should leave a result on the stack
	  					, out_e*
	  					  // If true, jump to the loop body again
	  					, IFNE(LabelRef(loopbodylbl))
	  				   ]
	  				   
	// Assign      : VarRef * Exp -> Statement
	stmt-to-jbc: Assign(FieldRef(fname), e) -> out*
	where
		oute*	:= <exp-to-jbc> e
	;	out*	:= [ ALOAD_0()
					,oute*
					,PUTFIELD(<fieldref> fname)
					]
	stmt-to-jbc: Assign(VarRef(localname), e) -> out*
	where
		oute*	:= <exp-to-jbc> e
	;	localnum:= <get-var-index> localname
	;	type	:= <get-type> localname
	;	out*	:= [oute*,<localstore(|localnum)>type]
	
	//ArrayAssign : VarRef * Exp * Exp -> Statement
	stmt-to-jbc: ArrayAssign(FieldRef(fname), indexe, e) -> out*
	where
		outie*	:= <exp-to-jbc> indexe
	;	oute*	:= <exp-to-jbc> e
	;	fref	:= <fieldref>fname
	;	out*	:= [ ALOAD_0()
	 				,GETFIELD(fref)
	 				,outie*
					,oute*
					,IASTORE()
					]
	stmt-to-jbc: ArrayAssign(VarRef(localname), ie, e) -> out*
	where
		oute*	:= <exp-to-jbc> e
	;	outie*	:= <exp-to-jbc> ie
	;	localnum:= <get-var-index> localname
	;	out*	:= [ ALOAD(VarRef(localnum))
	 				,outie*
	 				,oute*
	 				,IASTORE()
	 				]	
  		
overlays
	GET-STATIC(cref, fref, ftype) =
  		GETSTATIC(
  			JBCFieldRef(
  				CRef(cref),
  				FRef(fref),
  				JBCFieldDesc(Reference(CRef(ftype)))
  			)
  		)