module codegen/codegen-stmt

imports
  
  milestone1/MiniJava
  milestone2/MiniJava.core
  lib/jasmin/JasminXT
  trans/codegen/-

rules  
	/** Statements **/
  //  Print       : Exp -> Statement
  stmt-to-jbc:	Print(e) -> stmt*
  	where
  		exp* := <exp-to-jbc> e
  	;	stmt* := [
	  		<getstatic> ("java/lang/System", "out", "java/io/PrintStream"),
	  		exp*,
	  		<invokevirtual> ("java/io/PrintStream", "println", [Int()], Void())
	  		]
	  		
  // Block       : List(Statement) -> Statement
  stmt-to-jbc: Block(stmtl)	-> <map(stmt-to-jbc) ; concat> stmtl
  
  // If          : Exp * Statement * Statement -> Statement
  // TODO: Generate unique label names
  stmt-to-jbc: If(e, ifs, elses) -> out*
  where
  	out_e*		:= <exp-to-jbc> e
  ;	out_ifs*	:= <stmt-to-jbc> ifs
  ; out_elses*	:= <stmt-to-jbc> elses
  ; out*		:= [
  			// Execute the expression, this should leave a result on the stack
  			out_e*,
  			// Compare == 0, 0 == false so jump to else if 0
  			IFEQ(LabelRef("else0")),
  			out_ifs*,
  			GOTO(LabelRef("end0")),
  			JBCLabel("else0"),
  			out_elses*,
  			JBCLabel("end0")
  		]
  		
  // While       : Exp * Statement -> Statement
  // TODO: Generate unique label names
   stmt-to-jbc: While(e, stmt) -> out*
   where
	 	out_e*		:= <exp-to-jbc> e
	  ; out_stmt*	:= <stmt-to-jbc> stmt
	  ; out*		:= [
	    		// It is more efficient to jump to the condition here, as it decreases the number of jumps in loop execution from 2 to 1
	    		GOTO(LabelRef("loopcond0")),
	    		// Define the loop body start
	    		JBCLabel("loop0"),
	  			out_stmt*,
	  			JBCLabel("loopcond0"),
	  			// Execute the expression, this should leave a result on the stack
	  			out_e*,
	  			// If true, jump to the loop body again
	  			IFNE(LabelRef("loop0"))
	  		]
  		