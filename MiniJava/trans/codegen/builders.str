module codegen/builders

imports
  libstratego-lib
  libstratego-aterm
  libstratego-gpp
  editor-common.generated

  lib/runtime/analysis/-
  lib/runtime/nabl/-
  lib/runtime/types/-
  lib/runtime/task/-
  lib/runtime/properties/-
  lib/runtime/index/-
  
  trans/codegen/-
  
  milestone1/-
  milestone2/-
  
  lib/jasmin/JasminXT-pp
  lib/jasmin/JasminXT

rules
	// Generate .j files in same directory
	generate-jbc:
		(selected, position, ast, path, project-path) -> None()
		where
			// Initialize NaBL
			index-setup(|<language>, project-path, path); task-setup(|project-path)
		;	<program-to-jbc ; map(write-jasminfile-unique(|path))> ast
	
	// Generate jasmin ast for selection	 	
	generate-jbc-selection:
		(selected, position, ast, path, project-path) -> (filename, result)
		where
			// Initialize NaBL
			index-setup(|<language>, project-path, path); task-setup(|project-path)
		;	filename := <guarantee-extension(|"generated.aterm")> path
		;	result := <to-jbc> selected

    // Generate .j and .class file in binary directory
	generate-java-class-files:
		(selected, position, ast, path, project-path) -> None()
		where
			// Initialize NaBL
			index-setup(|<language>, project-path, path); task-setup(|project-path)
		;	outputdir	:= <concat-strings> [<binaries-directory> (), "/", <dirname> path, "/", <base-filename> path]
		;	<program-to-jbc; map(write-classfile(|outputdir))> ast
	
	// Write a JBCFile to a original-file.classname.generated.j file
	write-jasminfile-unique(|basefile): jbcfile -> None()
		where
			classn	:= <classname> jbcfile
		;	newfile	:= <guarantee-extension(|$[[classn].generated.j])> basefile
		;	<write-jasminfile(|newfile)> jbcfile
	// Write a JBCFile to a .j file	
	write-jasminfile(|outputfile): jbcfile -> None()
		where
		 	// Write the Jasmin assembler file
			<write-file> (outputfile, <pp-jasminxt-string> jbcfile)
		;	<refresh-workspace-file> outputfile
		;	<debug> $[Written [outputfile]]
	
	// Write a JBCFile to a .j file and convert it to a classfile.  		
	write-classfile(|outputdir): jbcfile -> None()
		where
			// Determines filenames and paths
			classname	:= <classname> jbcfile
			// Create output directory for binary files
		;	<mkdir-p> outputdir
		;	classfname	:= <make-filename> (outputdir, classname, "class")
		;	jasminfname	:= <make-filename> (outputdir, classname, "j")
		 	// Write the Jasmin assembler file
		;	<write-jasminfile(|jasminfname)> jbcfile 
		 	// Call Jasmin on the generated file
		;	<try(call)> ("java", ["-jar", $[[<project-path>]/lib/jasmin.jar], "-d", outputdir, jasminfname])
		;	<refresh-workspace-file> classfname 
		 	
	// Run a mjv program if it is already compiled
	run-file-after-generation:
		(selected, position, ast, path, project-path) -> (filename, result)
		with
			filename	:= <guarantee-extension(|"result.txt")> path	
		where
			classname	:= <mainclass-name> ast
		;	bindir		:= <concat-strings> [<binaries-directory> (), "/", <dirname> path, "/", <base-filename> path]
		;	<execute-java(|bindir) ; process-output> classname => result
		
rules // helper rules
	
	write-file: (filename, content) -> <id>
	where
		file := <fopen> (filename, "w")
	;	<fputs> (content, file)
	;	<fclose> file
	;	<refresh-workspace-file> filename
	 	
	mainclass-name: Program(MainClass(cname, _, _), _) -> <strip-annos> cname
	classname: JBCFile(JBCHeader(_,_,JBCClass(_, cname),_,_,_,_,_),_,_) -> cname
	
	make-filename: (parent, filename, ext) -> <concat-strings ; guarantee-extension(|ext)> [parent, "/", filename]
	
	// This should probably be a constant or something, but I'm a noob stratego programmer and only know rules
	binaries-directory: () -> $[[<project-path>]/bin_mjv]
	
	// Create directory if not exists, like mkdir -p (but doesn't create parents)
	mkdir-p:  path -> <id>
	where
		parent	:=	<dirname> path
	//;	<debug(!"Mkdir-p for directory")> path
	 	// Recursively create parent dir if neccesary
	;	<(file-exists ; filemode ; isdir) <+ mkdir-p> parent
	 	// Create dir if neccesary
	;	<(file-exists ; filemode ; isdir) <+ mkdir> path

rules // Below portion all shamelessly stolen from JasminXT Project	
	process-output: Output(result, "") -> result

	process-output: Output(result, error) -> $[[result] Runtime error: [error]]
		where not (<""> error)

signature constructors
	
	Output: String * String -> Term
		
strategies
	
	external execute-java(|path)