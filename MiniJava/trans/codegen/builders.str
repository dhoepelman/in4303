module codegen/builders

imports
  libstratego-lib
  libstratego-aterm
  libstratego-gpp
  editor-common.generated

  lib/runtime/analysis/-
  lib/runtime/nabl/-
  lib/runtime/types/-
  lib/runtime/task/-
  lib/runtime/properties/-
  
  trans/codegen/-
  
  milestone1/-
  milestone2/-
  
  lib/jasmin/JasminXT-pp

rules
	generate-jbc:
		(selected, position, ast, path, project-path) -> (filename, result)
		where
			filename := <guarantee-extension(|"generated.j")> path
		;	jasminast := <program-to-jbc> ast
		;	result := <pp-jasminxt-string> jasminast
		 	
	generate-jbc-selection:
		(selected, position, ast, path, project-path) -> (filename, result)
		where
			filename := <guarantee-extension(|"generated.aterm")> path
		;	result := <to-jbc> selected
	
	// Continue here with "Generate Java Class Files" and the challenges seem fun too 	
	generate-class-files:
		(selected, position, ast, path, project-path) -> None()
		where
			// Determines filenames and paths
			filename	:= <base-filename> path
		;	classname	:= <mainclass-name> ast
		 	// To prevent conflicts, store files in $output_dir/$path_to_file/$filename/$classname.[j|class]
		;	outputdir	:= <concat-strings> [<binaries-directory> (), "/", <dirname> path, "/", filename]
		;	jasminfname	:= <make-filename> (outputdir, classname, "j")
		;	classfname	:= <make-filename> (outputdir, classname, "class")
		 	// Create output directory for binary files
		;	<mkdir-p> outputdir
		 	// Write the Jasmin assembler file
		;	<write-file> (jasminfname, <program-to-jbc/*;localize-classname(|filename)*/;pp-jasminxt-string> ast)
		 	// Call Jasmin on the generated file
		;	<try(call)> ("java", ["-jar", $[[<project-path>]/lib/jasmin.jar], "-d", outputdir, jasminfname])
		;	<refresh-workspace-file> jasminfname 
		;	<refresh-workspace-file> classfname 
		 	
	
	run-file-after-generation:
		(selected, position, ast, path, project-path) -> (filename, result)
		where
			filename	:= <guarantee-extension(|"result.txt")> path	 	
		;	classname	:= <mainclass-name> ast
		;	fullpath	:= <concat-strings> [project-path, "/", <dirname> path]
		;	<execute-java(|fullpath) ; process-output> classname => result
		
rules // helper rules
	
	write-file: (filename, content) -> <id>
	where
		file := <fopen> (filename, "w")
	;	<fputs> (content, file)
	;	<fclose> file
	;	<refresh-workspace-file> filename
	 	
	mainclass-name: Program(MainClass(cname, _, _), _) -> <strip-annos> cname
	
	make-filename: (parent, filename, ext) -> <concat-strings ; guarantee-extension(|ext)> [parent, "/", filename]
	
	// This should probably be a constant or something, but I'm a noob stratego programmer and only know rules
	binaries-directory: () -> $[[<project-path>]/bin_mjv]
	
	// Create directory if not exists, like mkdir -p (but doesn't create parents)
	mkdir-p:  path -> <id>
	where
		parent	:=	<dirname> path
	//;	<debug(!"Mkdir-p for directory")> path
	 	// Recursively create parent dir if neccesary
	;	<(file-exists ; filemode ; isdir) <+ mkdir-p> parent
	 	// Create dir if neccesary
	;	<(file-exists ; filemode ; isdir) <+ mkdir> path

rules // Below portion all shamelessly stolen from JasminXT Project	
	process-output: Output(result, "") -> result

	process-output: Output(result, error) -> $[[result] Runtime error: [error]]
		where not (<""> error)

signature constructors
	
	Output: String * String -> Term
		
strategies
	
	external execute-java(|path)