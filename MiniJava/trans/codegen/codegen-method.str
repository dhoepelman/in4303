module codegen/codegen-method

imports
  
  milestone1/MiniJava
  milestone2/MiniJava.core
  lib/jasmin/JasminXT
  trans/codegen/-
  
  lib/runtime/nabl/-
  lib/runtime/types/-
  
rules

	// Method      : Type * ID * List(ParamDecl) * List(VarDecl) * List(Statement) * Exp -> MethodDecl	
	method-to-jbc: Method(rettype, mname, params*, vars*, stmt*, retexp) ->
		JBCMethod(
		   [PUBLIC()]				// Every MiniJava method is public
		  ,<strip-annos> mname		// Method name
		  ,<get-descriptor> mname	// Method signature/descriptor
		  ,methodstatements
		)
	where
		startlbl		:= <newname> "methodstart_"
	;	endlbl			:= <newname> "methodend_"
	 	// Variables
	; 	locals*			:= <conc> (params*,vars*)
	; 	localsdecl*		:= <map(varcomp;make-vardecl(|startlbl,endlbl))> locals*
	;  	locallimit		:= <length;inc> locals*	// `this` is local 0 so num locals is length+1
	 	// Statements in JBC
	;	stmtjbc*		:= <map(stmt-to-jbc); concat> stmt*
	;	retexpjbc*		:= <exp-to-jbc> retexp
	 	// Calculate stack limit
	//;	stmtstacklimit	:= <map(stack-limit) ; foldr(!0, max)> stmt* // list-max doesn't work on the empty list
	//;	stacklimit		:= <max> (<stack-limit> retexp, stmtstacklimit)
	; stacklimit		:= 100
	//;	<debug> stacklimit
	// Make all of the method statements
	;	methodstatements:= [ JBCLimitStack(<int-to-string>stacklimit)
	 						,JBCLimitLocals(<int-to-string>locallimit)
	 						,localsdecl*
	 						,JBCLabel(startlbl)
	 						,stmtjbc*
	 						,retexpjbc*
	 						,<j-retexp> rettype
	 						, JBCLabel(endlbl)
	 						]
	
	
	// Create method descriptor
	nabl-prop-site(|lang, ctx, uris, states, implicits):
	  Method(ty, mname, param*, var*, stmt*, exp) -> <fail>
	  where
	  	descr := JBCMethodDesc(<map(paramtype;type-to-jbc)> param*, <type-to-jbc> ty) // Method description: (params, return type)
	  ; <store-descriptor(|ctx, descr)> mname
	  ; locals* := <conc;map(varname)> (param*,var*)
	  ; <map-with-index(store-var-index-tuple(|ctx))> locals*
	  //; <conc;nmap(store-var-index|1)> (param*,var*)
	    
	    
rules // helper rules	
	store-var-index-tuple(|ctx): (i, e) -> <store-var-index(|ctx,i)> e 
	
	j-retexp: Bool() -> IRETURN()
	j-retexp: Int() -> IRETURN()
	j-retexp: IntArray() -> ARETURN()
	j-retexp: ClassType(_) -> ARETURN()
	
	paramtype: Param(t, _) -> t
	
	varname: Param(_,n) -> n
	varname: Var(_,n) -> n
	
	varcomp: Param(t,n) -> (t,n)
	varcomp: Var(t,n) -> (t,n)
	
	make-vardecl(|label1,label2): (type, name) -> JBCVarDecl(
		  <get-var-index;int-to-string> name
		, <strip-annos> name
		, JBCFieldDesc(<type-to-jbc>type)
		, LabelRef(label1)
		, LabelRef(label2)
		)