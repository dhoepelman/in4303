module minijava

imports
    
  libstratego-lib
  libstratego-aterm
  libstratego-gpp
  editor-common.generated

  lib/runtime/analysis/-
  lib/runtime/nabl/-
  lib/runtime/types/-
  lib/runtime/task/-
  lib/runtime/properties/-
  
  trans/codegen/-
  
  milestone1/-
  milestone2/-
  
  lib/jasmin/JasminXT-pp
  trans/filehelper
  
rules // Analysis
  
  editor-analyze = analysis-default-editor
  
  analysis-single-default-interface = 
    analysis-single-default(desugar-all, desugar-after-all, id|<language>)
  analysis-multiple-default-interface = 
    analysis-multiple-default(parse-file <+ !(), desugar-all, desugar-after-all, id|<language>, <project-path>)
  
  editor-save = analysis-save-default(|<language>)

rules // Editor services
  
  // Resolves a reference when the user control-clicks or presses F3 in the editor.
  editor-resolve:
    (node, position, ast, path, project-path) -> definition
    where
      definition := <analysis-resolve(|<language>, project-path, path)> node

  // Returns "hover help" information for a particular node in the editor.
  // For references, this rule is invoked using the resolved term.
  editor-hover:
    (target, position, ast, path, project-path) -> hover
    where
    	ty    := <get-type> target
    ; hover := <pp-type> ty
  
  // Completes an identifier when the user presses control-space
  // (the completion identifier in the AST provides additional context information)
  editor-complete:
    (node, position, ast, path, project-path) -> proposals
    where
      proposals := <analysis-propose-completions(|<language>, project-path, path)> ast
     
rules // Builders
	generate-jbc:
		(selected, position, ast, path, project-path) -> (filename, result)
		where
			filename := <guarantee-extension(|"generated.j")> path
		;	jasminast := <program-to-jbc> ast
		;	result := <pp-jasminxt-string> jasminast
		 	
	generate-jbc-selection:
		(selected, position, ast, path, project-path) -> (filename, result)
		where
			filename := <guarantee-extension(|"generated.aterm")> path
		;	result := <to-jbc> selected
		 	
	generate-class-files:
		(selected, position, ast, path, project-path) -> None()
		where
			filename := <guarantee-extension(|".class")> path
		;	result := ""
		 	
	/*
	generate-class:
		(selected, position, ast, path, project-path) -> None()
		with
			parentdir := <dirname> path ;
			<try(call)> ("java", ["-jar", $[[<project-path>]/lib/jasmin.jar], "-d", parentdir, path])
		where
			cfname := <concat-strings ; guarantee-extension(|"class")> [project-path, "/", <dirname> path, "/", <class-name> ast] ;
			<refresh-workspace-file> cfname
			
	execute-class:
		(selected, position, ast, path, project-path) -> (filename, result)
		with
			filename := <guarantee-extension(|"result.txt")> path
		with
			cname := <class-name ; string-replace(|"/",".")> ast ;
			cpath := <concat-strings> [project-path, "/", <dirname> path] ;
			<execute-java(|cpath) ; process-output> cname => result
		
	
	process-output: Output(result, "") -> result

	process-output: Output(result, error) -> $[[result] Runtime error: [error]]
		where not (<""> error)
		*/
  
rules // Debugging
  
  // Prints the abstract syntax ATerm of a selection.
  debug-show-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := selected
      
  // Prints the analyzed annotated abstract syntax ATerm of a selection.
  debug-show-analyzed:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"analyzed.aterm")> path;
      result   := selected
      
  debug-index-project =
    analysis-debug-index-project(|<language>)
  debug-index-partition =
    analysis-debug-index-partition(|<language>)

  debug-task-project =
    analysis-debug-task-project(|<language>)
  debug-task-partition =
    analysis-debug-task-partition(|<language>)
  debug-task-selection =
    analysis-debug-task-selection(|<language>)
    
  debug-project =
    analysis-debug-project(|<language>)
  debug-partition =
    analysis-debug-partition(|<language>)
    
  debug-reanalyze = 
    analysis-debug-reanalyze(|<language>)

