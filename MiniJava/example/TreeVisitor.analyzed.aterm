Program(
  MainClass(
    "TreeVisitor"
  , "a"
  , Print(Call(NewObject("TV"), "Start", []))
  )
, [ Class(
      "TV"
    , None()
    , []
    , [ Method(
          Int()
        , "Start"
        , []
        , [ Var(ClassType("Tree"), "root")
          , Var(Bool(), "ntb")
          , Var(Int(), "nti")
          , Var(ClassType("MyVisitor"), "v")
          ]
        , [ Assign(VarRef("root"), NewObject("Tree"))
          , Assign(
              VarRef("ntb")
            , Call(VarRef("root"), "Init", [IntValue("16")])
            )
          , Assign(VarRef("ntb"), Call(VarRef("root"), "Print", []))
          , Print(IntValue("100000000"))
          , Assign(
              VarRef("ntb")
            , Call(VarRef("root"), "Insert", [IntValue("8")])
            )
          , Assign(
              VarRef("ntb")
            , Call(VarRef("root"), "Insert", [IntValue("24")])
            )
          , Assign(
              VarRef("ntb")
            , Call(VarRef("root"), "Insert", [IntValue("4")])
            )
          , Assign(
              VarRef("ntb")
            , Call(VarRef("root"), "Insert", [IntValue("12")])
            )
          , Assign(
              VarRef("ntb")
            , Call(VarRef("root"), "Insert", [IntValue("20")])
            )
          , Assign(
              VarRef("ntb")
            , Call(VarRef("root"), "Insert", [IntValue("28")])
            )
          , Assign(
              VarRef("ntb")
            , Call(VarRef("root"), "Insert", [IntValue("14")])
            )
          , Assign(VarRef("ntb"), Call(VarRef("root"), "Print", []))
          , Print(IntValue("100000000"))
          , Assign(VarRef("v"), NewObject("MyVisitor"))
          , Print(IntValue("50000000"))
          , Assign(
              VarRef("nti")
            , Call(VarRef("root"), "accept", [VarRef("v")])
            )
          , Print(IntValue("100000000"))
          , Print(Call(VarRef("root"), "Search", [IntValue("24")]))
          , Print(Call(VarRef("root"), "Search", [IntValue("12")]))
          , Print(Call(VarRef("root"), "Search", [IntValue("16")]))
          , Print(Call(VarRef("root"), "Search", [IntValue("50")]))
          , Print(Call(VarRef("root"), "Search", [IntValue("12")]))
          , Assign(
              VarRef("ntb")
            , Call(VarRef("root"), "Delete", [IntValue("12")])
            )
          , Assign(VarRef("ntb"), Call(VarRef("root"), "Print", []))
          , Print(Call(VarRef("root"), "Search", [IntValue("12")]))
          ]
        , IntValue("0")
        )
      ]
    )
  , Class(
      "Tree"
    , None()
    , [ Field(ClassType("Tree"), "left")
      , Field(ClassType("Tree"), "right")
      , Field(Int(), "key")
      , Field(Bool(), "has_left")
      , Field(Bool(), "has_right")
      , Field(ClassType("Tree"), "my_null")
      ]
    , [ Method(
          Bool()
        , "Init"
        , [Param(Int(), "v_key")]
        , []
        , [ Assign(VarRef("key"), VarRef("v_key"))
          , Assign(VarRef("has_left"), False())
          , Assign(VarRef("has_right"), False())
          ]
        , True()
        )
      , Method(
          Bool()
        , "SetRight"
        , [Param(ClassType("Tree"), "rn")]
        , []
        , [Assign(VarRef("right"), VarRef("rn"))]
        , True()
        )
      , Method(
          Bool()
        , "SetLeft"
        , [Param(ClassType("Tree"), "ln")]
        , []
        , [Assign(VarRef("left"), VarRef("ln"))]
        , True()
        )
      , Method(
          ClassType("Tree")
        , "GetRight"
        , []
        , []
        , []
        , VarRef("right")
        )
      , Method(
          ClassType("Tree")
        , "GetLeft"
        , []
        , []
        , []
        , VarRef("left")
        )
      , Method(Int(), "GetKey", [], [], [], VarRef("key"))
      , Method(
          Bool()
        , "SetKey"
        , [Param(Int(), "v_key")]
        , []
        , [Assign(VarRef("key"), VarRef("v_key"))]
        , True()
        )
      , Method(Bool(), "GetHas_Right", [], [], [], VarRef("has_right"))
      , Method(Bool(), "GetHas_Left", [], [], [], VarRef("has_left"))
      , Method(
          Bool()
        , "SetHas_Left"
        , [Param(Bool(), "val")]
        , []
        , [Assign(VarRef("has_left"), VarRef("val"))]
        , True()
        )
      , Method(
          Bool()
        , "SetHas_Right"
        , [Param(Bool(), "val")]
        , []
        , [Assign(VarRef("has_right"), VarRef("val"))]
        , True()
        )
      , Method(
          Bool()
        , "Compare"
        , [Param(Int(), "num1"), Param(Int(), "num2")]
        , [Var(Bool(), "ntb"), Var(Int(), "nti")]
        , [ Assign(VarRef("ntb"), False())
          , Assign(
              VarRef("nti")
            , BinExp(Plus(), VarRef("num2"), IntValue("1"))
            )
          , If(
              BinExp(Smaller(), VarRef("num1"), VarRef("num2"))
            , Assign(VarRef("ntb"), False())
            , If(
                UnExp(Negation(), BinExp(Smaller(), VarRef("num1"), VarRef("nti")))
              , Assign(VarRef("ntb"), False())
              , Assign(VarRef("ntb"), True())
              )
            )
          ]
        , VarRef("ntb")
        )
      , Method(
          Bool()
        , "Insert"
        , [Param(Int(), "v_key")]
        , [ Var(ClassType("Tree"), "new_node")
          , Var(Bool(), "ntb")
          , Var(ClassType("Tree"), "current_node")
          , Var(Bool(), "cont")
          , Var(Int(), "key_aux")
          ]
        , [ Assign(VarRef("new_node"), NewObject("Tree"))
          , Assign(
              VarRef("ntb")
            , Call(VarRef("new_node"), "Init", [VarRef("v_key")])
            )
          , Assign(VarRef("current_node"), This())
          , Assign(VarRef("cont"), True())
          , While(
              VarRef("cont")
            , Block(
                [ Assign(VarRef("key_aux"), Call(VarRef("current_node"), "GetKey", []))
                , If(
                    BinExp(Smaller(), VarRef("v_key"), VarRef("key_aux"))
                  , Block(
                      [ If(
                          Call(VarRef("current_node"), "GetHas_Left", [])
                        , Assign(VarRef("current_node"), Call(VarRef("current_node"), "GetLeft", []))
                        , Block(
                            [ Assign(VarRef("cont"), False())
                            , Assign(
                                VarRef("ntb")
                              , Call(VarRef("current_node"), "SetHas_Left", [True()])
                              )
                            , Assign(
                                VarRef("ntb")
                              , Call(VarRef("current_node"), "SetLeft", [VarRef("new_node")])
                              )
                            ]
                          )
                        )
                      ]
                    )
                  , Block(
                      [ If(
                          Call(VarRef("current_node"), "GetHas_Right", [])
                        , Assign(VarRef("current_node"), Call(VarRef("current_node"), "GetRight", []))
                        , Block(
                            [ Assign(VarRef("cont"), False())
                            , Assign(
                                VarRef("ntb")
                              , Call(VarRef("current_node"), "SetHas_Right", [True()])
                              )
                            , Assign(
                                VarRef("ntb")
                              , Call(VarRef("current_node"), "SetRight", [VarRef("new_node")])
                              )
                            ]
                          )
                        )
                      ]
                    )
                  )
                ]
              )
            )
          ]
        , True()
        )
      , Method(
          Bool()
        , "Delete"
        , [Param(Int(), "v_key")]
        , [ Var(ClassType("Tree"), "current_node")
          , Var(ClassType("Tree"), "parent_node")
          , Var(Bool(), "cont")
          , Var(Bool(), "found")
          , Var(Bool(), "ntb")
          , Var(Bool(), "is_root")
          , Var(Int(), "key_aux")
          ]
        , [ Assign(VarRef("current_node"), This())
          , Assign(VarRef("parent_node"), This())
          , Assign(VarRef("cont"), True())
          , Assign(VarRef("found"), False())
          , Assign(VarRef("is_root"), True())
          , While(
              VarRef("cont")
            , Block(
                [ Assign(VarRef("key_aux"), Call(VarRef("current_node"), "GetKey", []))
                , If(
                    BinExp(Smaller(), VarRef("v_key"), VarRef("key_aux"))
                  , If(
                      Call(VarRef("current_node"), "GetHas_Left", [])
                    , Block(
                        [ Assign(VarRef("parent_node"), VarRef("current_node"))
                        , Assign(VarRef("current_node"), Call(VarRef("current_node"), "GetLeft", []))
                        ]
                      )
                    , Assign(VarRef("cont"), False())
                    )
                  , If(
                      BinExp(Smaller(), VarRef("key_aux"), VarRef("v_key"))
                    , If(
                        Call(VarRef("current_node"), "GetHas_Right", [])
                      , Block(
                          [ Assign(VarRef("parent_node"), VarRef("current_node"))
                          , Assign(VarRef("current_node"), Call(VarRef("current_node"), "GetRight", []))
                          ]
                        )
                      , Assign(VarRef("cont"), False())
                      )
                    , Block(
                        [ If(
                            VarRef("is_root")
                          , If(
                              BinExp(
                                LogicalAnd()
                              , UnExp(Negation(), Call(VarRef("current_node"), "GetHas_Right", []))
                              , UnExp(Negation(), Call(VarRef("current_node"), "GetHas_Left", []))
                              )
                            , Assign(VarRef("ntb"), True())
                            , Assign(
                                VarRef("ntb")
                              , Call(This(), "Remove", [VarRef("parent_node"), VarRef("current_node")])
                              )
                            )
                          , Assign(
                              VarRef("ntb")
                            , Call(This(), "Remove", [VarRef("parent_node"), VarRef("current_node")])
                            )
                          )
                        , Assign(VarRef("found"), True())
                        , Assign(VarRef("cont"), False())
                        ]
                      )
                    )
                  )
                , Assign(VarRef("is_root"), False())
                ]
              )
            )
          ]
        , VarRef("found")
        )
      , Method(
          Bool()
        , "Remove"
        , [Param(ClassType("Tree"), "p_node"), Param(ClassType("Tree"), "c_node")]
        , [Var(Bool(), "ntb"), Var(Int(), "auxkey1"), Var(Int(), "auxkey2")]
        , [ If(
              Call(VarRef("c_node"), "GetHas_Left", [])
            , Assign(
                VarRef("ntb")
              , Call(This(), "RemoveLeft", [VarRef("p_node"), VarRef("c_node")])
              )
            , If(
                Call(VarRef("c_node"), "GetHas_Right", [])
              , Assign(
                  VarRef("ntb")
                , Call(This(), "RemoveRight", [VarRef("p_node"), VarRef("c_node")])
                )
              , Block(
                  [ Assign(VarRef("auxkey1"), Call(VarRef("c_node"), "GetKey", []))
                  , Assign(
                      VarRef("auxkey2")
                    , Call(Call(VarRef("p_node"), "GetLeft", []), "GetKey", [])
                    )
                  , If(
                      Call(This(), "Compare", [VarRef("auxkey1"), VarRef("auxkey2")])
                    , Block(
                        [ Assign(
                            VarRef("ntb")
                          , Call(VarRef("p_node"), "SetLeft", [VarRef("my_null")])
                          )
                        , Assign(
                            VarRef("ntb")
                          , Call(VarRef("p_node"), "SetHas_Left", [False()])
                          )
                        ]
                      )
                    , Block(
                        [ Assign(
                            VarRef("ntb")
                          , Call(VarRef("p_node"), "SetRight", [VarRef("my_null")])
                          )
                        , Assign(
                            VarRef("ntb")
                          , Call(VarRef("p_node"), "SetHas_Right", [False()])
                          )
                        ]
                      )
                    )
                  ]
                )
              )
            )
          ]
        , True()
        )
      , Method(
          Bool()
        , "RemoveRight"
        , [Param(ClassType("Tree"), "p_node"), Param(ClassType("Tree"), "c_node")]
        , [Var(Bool(), "ntb")]
        , [ While(
              Call(VarRef("c_node"), "GetHas_Right", [])
            , Block(
                [ Assign(
                    VarRef("ntb")
                  , Call(
                      VarRef("c_node")
                    , "SetKey"
                    , [Call(Call(VarRef("c_node"), "GetRight", []), "GetKey", [])]
                    )
                  )
                , Assign(VarRef("p_node"), VarRef("c_node"))
                , Assign(VarRef("c_node"), Call(VarRef("c_node"), "GetRight", []))
                ]
              )
            )
          , Assign(
              VarRef("ntb")
            , Call(VarRef("p_node"), "SetRight", [VarRef("my_null")])
            )
          , Assign(
              VarRef("ntb")
            , Call(VarRef("p_node"), "SetHas_Right", [False()])
            )
          ]
        , True()
        )
      , Method(
          Bool()
        , "RemoveLeft"
        , [Param(ClassType("Tree"), "p_node"), Param(ClassType("Tree"), "c_node")]
        , [Var(Bool(), "ntb")]
        , [ While(
              Call(VarRef("c_node"), "GetHas_Left", [])
            , Block(
                [ Assign(
                    VarRef("ntb")
                  , Call(
                      VarRef("c_node")
                    , "SetKey"
                    , [Call(Call(VarRef("c_node"), "GetLeft", []), "GetKey", [])]
                    )
                  )
                , Assign(VarRef("p_node"), VarRef("c_node"))
                , Assign(VarRef("c_node"), Call(VarRef("c_node"), "GetLeft", []))
                ]
              )
            )
          , Assign(
              VarRef("ntb")
            , Call(VarRef("p_node"), "SetLeft", [VarRef("my_null")])
            )
          , Assign(
              VarRef("ntb")
            , Call(VarRef("p_node"), "SetHas_Left", [False()])
            )
          ]
        , True()
        )
      , Method(
          Int()
        , "Search"
        , [Param(Int(), "v_key")]
        , [ Var(ClassType("Tree"), "current_node")
          , Var(Int(), "ifound")
          , Var(Bool(), "cont")
          , Var(Int(), "key_aux")
          ]
        , [ Assign(VarRef("current_node"), This())
          , Assign(VarRef("cont"), True())
          , Assign(VarRef("ifound"), IntValue("0"))
          , While(
              VarRef("cont")
            , Block(
                [ Assign(VarRef("key_aux"), Call(VarRef("current_node"), "GetKey", []))
                , If(
                    BinExp(Smaller(), VarRef("v_key"), VarRef("key_aux"))
                  , If(
                      Call(VarRef("current_node"), "GetHas_Left", [])
                    , Assign(VarRef("current_node"), Call(VarRef("current_node"), "GetLeft", []))
                    , Assign(VarRef("cont"), False())
                    )
                  , If(
                      BinExp(Smaller(), VarRef("key_aux"), VarRef("v_key"))
                    , If(
                        Call(VarRef("current_node"), "GetHas_Right", [])
                      , Assign(VarRef("current_node"), Call(VarRef("current_node"), "GetRight", []))
                      , Assign(VarRef("cont"), False())
                      )
                    , Block(
                        [Assign(VarRef("ifound"), IntValue("1")), Assign(VarRef("cont"), False())]
                      )
                    )
                  )
                ]
              )
            )
          ]
        , VarRef("ifound")
        )
      , Method(
          Bool()
        , "Print"
        , []
        , [Var(Bool(), "ntb"), Var(ClassType("Tree"), "current_node")]
        , [ Assign(VarRef("current_node"), This())
          , Assign(
              VarRef("ntb")
            , Call(This(), "RecPrint", [VarRef("current_node")])
            )
          ]
        , True()
        )
      , Method(
          Bool()
        , "RecPrint"
        , [Param(ClassType("Tree"), "node")]
        , [Var(Bool(), "ntb")]
        , [ If(
              Call(VarRef("node"), "GetHas_Left", [])
            , Block(
                [ Assign(
                    VarRef("ntb")
                  , Call(
                      This()
                    , "RecPrint"
                    , [Call(VarRef("node"), "GetLeft", [])]
                    )
                  )
                ]
              )
            , Assign(VarRef("ntb"), True())
            )
          , Print(Call(VarRef("node"), "GetKey", []))
          , If(
              Call(VarRef("node"), "GetHas_Right", [])
            , Block(
                [ Assign(
                    VarRef("ntb")
                  , Call(
                      This()
                    , "RecPrint"
                    , [Call(VarRef("node"), "GetRight", [])]
                    )
                  )
                ]
              )
            , Assign(VarRef("ntb"), True())
            )
          ]
        , True()
        )
      , Method(
          Int()
        , "accept"
        , [Param(ClassType("Visitor"), "v")]
        , [Var(Int(), "nti")]
        , [ Print(IntValue("333"))
          , Assign(
              VarRef("nti")
            , Call(VarRef("v"), "visit", [This()])
            )
          ]
        , IntValue("0")
        )
      ]
    )
  , Class(
      "Visitor"
    , None()
    , [Field(ClassType("Tree"), "l"), Field(ClassType("Tree"), "r")]
    , [ Method(
          Int()
        , "visit"
        , [Param(ClassType("Tree"), "n")]
        , [Var(Int(), "nti")]
        , [ If(
              Call(VarRef("n"), "GetHas_Right", [])
            , Block(
                [ Assign(VarRef("r"), Call(VarRef("n"), "GetRight", []))
                , Assign(
                    VarRef("nti")
                  , Call(VarRef("r"), "accept", [This()])
                  )
                ]
              )
            , Assign(VarRef("nti"), IntValue("0"))
            )
          , If(
              Call(VarRef("n"), "GetHas_Left", [])
            , Block(
                [ Assign(VarRef("l"), Call(VarRef("n"), "GetLeft", []))
                , Assign(
                    VarRef("nti")
                  , Call(VarRef("l"), "accept", [This()])
                  )
                ]
              )
            , Assign(VarRef("nti"), IntValue("0"))
            )
          ]
        , IntValue("0")
        )
      ]
    )
  , Class(
      "MyVisitor"
    , Parent("Visitor")
    , []
    , [ Method(
          Int()
        , "visit"
        , [Param(ClassType("Tree"), "n")]
        , [Var(Int(), "nti")]
        , [ If(
              Call(VarRef("n"), "GetHas_Right", [])
            , Block(
                [ Assign(VarRef("r"), Call(VarRef("n"), "GetRight", []))
                , Assign(
                    VarRef("nti")
                  , Call(VarRef("r"), "accept", [This()])
                  )
                ]
              )
            , Assign(VarRef("nti"), IntValue("0"))
            )
          , Print(Call(VarRef("n"), "GetKey", []))
          , If(
              Call(VarRef("n"), "GetHas_Left", [])
            , Block(
                [ Assign(VarRef("l"), Call(VarRef("n"), "GetLeft", []))
                , Assign(
                    VarRef("nti")
                  , Call(VarRef("l"), "accept", [This()])
                  )
                ]
              )
            , Assign(VarRef("nti"), IntValue("0"))
            )
          ]
        , IntValue("0")
        )
      ]
    )
  ]
)